openapi: "3.0.0"
info:
  title: "iWETA system api"
  version: "1.0.0"
  description: "restapi for iweta pig and cattle management system by Alinafe kamwendo and Quwaniso Ngwira"
  contact: 
    name: alinafe kamwendo and Quawaniso Ngwira
    email: "alinafekamwendo11@gmail.com"
  liscence:
    name: Apache 2.0
    url: "http://apache.org/"
  servers:
    -url: "http://localhost:3001"
    description: The server runs on port 3001 locally

schemes: [http,https]
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: accessToken
security: 
  - ApiKeyAuth: []
paths:
#aunthentication
  /auth/register:
    post:
      summary: creater user in the database
      tags:
        - user
      description: post user with username, phoneNumber, email,role,address,password
      requestBody:
        description: pass username,phone,email,role,address and password to register
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - username
                - phone
                - email
                - role
                - address
                - password
              properties:
                username:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                role:
                  type: string
                address:
                  type: string
                password:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        409:
          description: already registered
        400:
          description: invalid role
        500:
          description: internal server error
  /auth/login:
    post:
      summary: authenticating user using pasword and username
      tags:
        - user
      description: post user with username,password
      requestBody:
        description: pass username and password user registered with
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      
      responses:
        200:
          description: success
          schema:
            type: object
        403:
          description: user does not exist
        500:
          description: internal server error
    #logging in user
  /auth/update/{id}:
    put:
      summary: update user given user ID
      tags:
        - user
      description: post user with username, phoneNumber, email,role,address,password
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to update
      requestBody:
        description: pass username,phone,email,role,address and password to update
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - username
                - phone
                - email
                - role
                - address
                - password
              properties:
                username:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                role:
                  type: string
                address:
                  type: string
                password:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        409:
          description: already registered
        400:
          description: invalid role
        500:
          description: internal server error
        403:
          description: user does not exist
        500:
          description: internal server error
    #logging in user
  /auth/delete/{id}:
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete user with given ID
      tags:
        - user
      description: post user with username,password
      responses:
        200:
          description: success
        403:
          description: user does not exist
        500:
          description: internal server error
  /auth/basicinfo/{id}:
    get:
      summary: returns details of the user of given id
      tags:
        - user
      description: pass user ID in the parameter to return his details
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user 
      responses:
        200:
          description: success
        409:
          description: already registered
        400:
          description: invalid role
        500:
          description: internal server error
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
#khola
  /khola/All:
    get:
      summary: returns array of all kholas
      tags:
        - khola
      description: no parameters ,get all kholas 
      responses:
        200:
          description: success
        404:
          description: Unathorized
        500:
          description: internal server error
  /khola/ByUserId/{id}:
    get:
      summary: returns array of kholas belonging to user of given ID
      tags:
        - khola
      description: pass user ID in the parameter to return his details
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user 
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /khola/ById/{id}:
    get:
      summary: returns khola of the given ID
      tags:
        - khola
      description: pass khola ID in the parameter to return his details
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the required khola 
      responses:
        200:
          description: success
        401:
          description: Unathorized
        404:
          description: Not Found
        500:
          description: internal server error
  /khola/create/{userId}:
    post:
      summary: creater khola in the database
      tags:
        - khola
      description: logged in farmer can create khola 
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the owner ,user ID
      requestBody:
        description: khola must have KholaName,Location,AnimalType,Breed,Number, DateOfBirth
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - KholaName
                - Location
                - AnimalType
                - Breed
                - Number
                - DateOfBirth
              properties:
                KholaName:
                  type: string
                Location:
                  type: string
                AnimalType:
                  type: string
                Breed:
                  type: string
                Number:
                  type: integer
                DateOfBirth:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  /khola/delete/{id}:
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete khola with given ID
      tags:
        - khola
      description: pass khola ID in the parameter to delete that khola
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
  /khola/update/{kholaId}:
    put:
      summary: update khola  of the given ID in the database
      tags:
        - khola
      description: logged in farmer can update khola 
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of the khola
      requestBody:
        description: khola must have KholaName,Location,AnimalType,Breed,Number, DateOfBirth
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - KholaName
                - Location
                - AnimalType
                - Breed
                - Number
                - DateOfBirth
              properties:
                KholaName:
                  type: string
                Location:
                  type: string
                AnimalType:
                  type: string
                Breed:
                  type: string
                Number:
                  type: integer
                DateOfBirth:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  #products
  /product/All:
    get:
      summary: returns array of all products
      tags:
        - products
      description: get all products on market
      responses:
        200:
          description: success
        404:
          description: Unathorized
        500:
          description: internal server error
  /product/bySupplier/{supplierId}:
    get:
      summary: returns array of kholas belonging to the supplier with given ID
      tags:
        - products
      description: pass supplier ID to get all products belonging to the supplier
      parameters:
        - in: path
          name: supplierId
          schema:
            type: integer
          required: true
          description: Numeric ID of the supplier
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /product/byId/{productId}:
    get:
      summary: returns product of the given ID
      tags:
        - products
      description: pass product ID in the parameter to return his details
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: Numeric ID of the required product
      responses:
        200:
          description: success
        401:
          description: Unathorized
        404:
          description: Not Found
        500:
          description: internal server error
  /product/create/{supplierId}:
    post:
      summary: creater khola in the database
      tags:
        - products
      description: supplier can post product passing its name, category, description,price 
      parameters:
        - in: path
          name: supplierId
          schema:
            type: integer
          required: true
          description: Numeric ID of the owner ,supplier ID
      requestBody:
        description: product must have Name,Category,Description,Price
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - Name
                - Category
                - Description
                - Price
              properties:
                Name:
                  type: string
                Category:
                  type: string
                Description:
                  type: string
                Price:
                  type: number
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  /product/delete/{productId}:
    delete:
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete product with given ID
      tags:
        - products
      description: pass product ID in the parameter to delete that product
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
  /product/update/{productId}:
    put:
      summary: update khola  of the given ID in the database
      tags:
        - products
      description: logged in farmer can update khola 
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: Numeric ID of the product
      requestBody:
        description: values of the product can be different or same to update 
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - Name
                - Category
                - Description
                - Price
              properties:
                Name:
                  type: string
                Category:
                  type: string
                Description:
                  type: string
                Price:
                  type: number
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  #records
  /records/All:
    get:
      summary: returns array of all records in the database
      tags:
        - records
      description: get all records in the database
      responses:
        200:
          description: success
        404:
          description: Unathorized
        500:
          description: internal server error
  /records/bykhola/{kholaId}:
    get:
      summary: returns array of records belonging to the khola with given ID
      tags:
        - records
      description: pass khola ID to get all records belonging to the khola
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of the khola
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /records/byId/{recordId}:
    get:
      summary: returns record of the given ID
      tags:
        - records
      description: pass record ID in the parameter to return his details
      parameters:
        - in: path
          name: recordId
          schema:
            type: integer
          required: true
          description: Numeric ID of the required record
      responses:
        200:
          description: success
        401:
          description: Unathorized
        404:
          description: Not Found
        500:
          description: internal server error
  /records/create/{kholaId}:
    post:
      summary: creater record of khola in the database
      tags:
        - records
      description: can post record passing Day of recording, activities done on that day, diseases recorded on that day,number of affected animals with the disease, costs incurred that day, and general comments if any
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of the khola
      requestBody:
        description: record must have Day,Activities,Diseases,Affected,Costs,Comments
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - Day
                - Activities
                - Diseases
                - Affected
                - Costs
                - Comments
              properties:
                Day:
                  type: string
                Activities:
                  type: string
                Diseases:
                  type: string
                Affected:
                  type: integer
                Costs:
                  type: number
                Comments:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  /records/delete/{recordId}:
    delete:
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete record with given ID
      tags:
        - records
      description: pass record ID in the parameter to delete that record
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
  /records/update/{recordId}:
    put:
      summary: update record  of the given ID in the database
      tags:
        - records
      description: values of record properties can all be changed or maintained to update
      parameters:
        - in: path
          name: recordId
          schema:
            type: integer
          required: true
          description: Numeric ID of the record
      requestBody:
        description: record must have Day,Activities,Diseases,Affected,Costs,Comments
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - Day
                - Activities
                - Diseases
                - Affected
                - Costs
                - Comments
              properties:
                Day:
                  type: string
                Activities:
                  type: string
                Diseases:
                  type: string
                Affected:
                  type: integer
                Costs:
                  type: number
                Comments:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  #schedules
  /schedules/All:
    get:
      summary: returns array of all schedules
      tags:
        - schedules
      description: get all schedules in the database
      responses:
        200:
          description: success
        404:
          description: Unathorized
        500:
          description: internal server error
  /schedules/bykhola/{kholaId}:
    get:
      summary: returns array of schedules belonging to the khola with given ID
      tags:
        - schedules
      description: pass khola ID to get all schedules belonging to the khola
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of the khola
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /schedules/byId/{scheduleId}:
    get:
      summary: returns scheule of the given ID
      tags:
        - schedules
      description: pass schedule ID in the parameter to return his details
      parameters:
        - in: path
          name: scheduleId
          schema:
            type: integer
          required: true
          description: Numeric ID of the required schedule
      responses:
        200:
          description: success
        401:
          description: Unathorized
        404:
          description: Not Found
        500:
          description: internal server error
  /schedules/create/{kholaId}:
    post:
      summary: creater schedule in the database
      tags:
        - schedules
      description: post json of Day and Activity
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of khola
      requestBody:
        description: schedule has Day and Activity
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - Day
                - Activity
              properties:
                Day:
                  type: string
                Activity:
                  type: string
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  /schedules/delete/{scheduleId}:
    delete:
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete schedule with given ID
      tags:
        - schedules
      description: pass schedule ID in the parameter to delete it
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
  /schedules/update/{scheduleId}:
    put:
      summary: update schedule  of the given ID in the database
      tags:
        - schedules
      description: logged in farmer can update khola 
      parameters:
        - in: path
          name: scheduleId
          schema:
            type: integer
          required: true
          description: Numeric ID of the schedule
      requestBody:
        description: values of the schedule can be different or same to update 
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - Day
                - Activity
              properties:
                Day:
                  type: string
                Activity:
                  type: string
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
          #Forum
  /posts/All:
    get:
      summary: returns array of all posts on forum
      tags:
        - forum
      description: get all posts on forum
      responses:
        200:
          description: success
        404:
          description: Unathorized
        500:
          description: internal server error
  /posts/byuserId/{userId}:
    get:
      summary: returns array of posts belonging to the user with given ID
      tags:
        - forum
      description: pass user ID to get all posts belonging to him
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user who posted it
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /posts/byId/{postId}:
    get:
      summary: returns post of the given ID
      tags:
        - forum
      description: pass post ID in the parameter to return his details
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: Numeric ID of the required post
      responses:
        200:
          description: success
        401:
          description: Unathorized
        404:
          description: Not Found
        500:
          description: internal server error
  /posts/create:
    post:
      summary: create post in the database
      tags:
        - forum
      description: create a post on forum passing its title,post body text,  
      requestBody:
        description: post must have title,postText
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - title
                - postText
              properties:
                title:
                  type: string
                postText:
                  type: string
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  /posts/delete/{postId}:
    delete:
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete post with given ID
      tags:
        - forum
      description: pass post ID in the parameter to delete 
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
  /posts/updatePost/{postId}:
    put:
      summary: update post  of the given ID in the database
      tags:
        - forum
      description: logged in farmer edit his post
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: Numeric ID of the post
      requestBody:
        description: values of the post can be different or same to update
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - title
                - postText
              properties:
                title:
                  type: string
                postText:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        401:
          description: Unauthorized
        500:
          description: internal server error
  #comments  
  /comments/All:
    get:
      summary: returns array of all comments on specific post
      tags:
        - forum
      description: get all comments of one post
      responses:
        200:
          description: success
        500:
          description: internal server error
  /comments/byPost/{postId}:
    get:
      summary: returns array of comments objects belonging to the post with given ID
      tags:
        - forum
      description: pass post ID to get all comments belonging to it
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          description: Numeric ID of the post 
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /comments/postComment/{postId}:
    post:
      summary: create comment in the database
      tags:
        - forum
      description: create a comment on post passing its comment body,  
      requestBody:
        description:  pass comment body only to comment on some post
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - commentBody
              properties:
                commentBody:
                  type: string
      responses:
        200:
          description: success
        404:
          description: not found
        406:
          description: duplicates not allowed
        401:
          description: Unauthorized
        500:
          description: internal server error
  /comments/delete/{commentId}:
    delete:
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
        
      summary: delete comment with given ID, first checks if the comment exist the update it otherwise 404 error
      tags:
        - forum
      description: pass comment ID in the parameter to delete 
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
  /comments/updateComment/{commentId}:
    put:
      summary: update comment  of the given ID in the database
      tags:
        - forum
      description: only farmer who commented it can edit the comment
      parameters:
        - in: path
          name: commentId
          schema:
            type: integer
          required: true
          description: Numeric ID of the comment
      requestBody:
        description: comment body of the comment can be different or same to update
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - commentBody
              properties:
                commentBody:
                  type: string
          application/xml:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
      responses:
        200:
          description: success
        404:
          description: not found
        401:
          description: Unauthorized
        500:
          description: internal server error
  #reports
  /khola/report/feeding/{kholaId}:
    get:
      summary: returns feeding report of given khola
      tags:
        - reports
      description: pass khola ID to get its feeding report
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of the khola 
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /khola/report/vaccination/{kholaId}:
    get:
      summary: returns vaccination report of given khola showing missing if its due is past or pending if not due
      tags:
        - reports
      description: pass khola ID to get its vaccination report
      parameters:
        - in: path
          name: kholaId
          schema:
            type: integer
          required: true
          description: Numeric ID of the khola 
      responses:
        200:
          description: success
        401:
          description: Unathorized
        500:
          description: internal server error
  /ussd:
    post:
      summary: handles logic for USSD app, any USSD simulator can reach this endpoint through *384*29891# through africa's talking gateway
      tags:
        - ussd
      description: dial *384*29891# on USSD simulator and will interact with the server 
      responses:
        200:
          description: success
        404:
          description: Not found
        500:
          description: internal server error
   